#include"adc.h" 
void adc_init(void){
RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1,ENABLE);
RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);
RCC_ADCCLKConfig(RCC_PCLK2_Div6);
	
GPIO_InitTypeDef Init_Structure;
ADC_InitTypeDef ADC_Structure;
	
Init_Structure.GPIO_Mode=GPIO_Mode_AIN;
Init_Structure.GPIO_Pin=GPIO_Pin_7;
Init_Structure.GPIO_Speed=GPIO_Speed_50MHz;
GPIO_Init(GPIOA,&Init_Structure);
	
ADC_Structure.ADC_ContinuousConvMode=ENABLE;
ADC_Structure.ADC_DataAlign=ADC_DataAlign_Right;
ADC_Structure.ADC_ExternalTrigConv=ADC_ExternalTrigConv_None;
ADC_Structure.ADC_Mode=ADC_Mode_Independent;
ADC_Structure.ADC_NbrOfChannel=1;
ADC_Structure.ADC_ScanConvMode=DISABLE;

ADC_Init(ADC1,&ADC_Structure);
	
ADC_RegularChannelConfig(ADC1,ADC_Channel_7,1,ADC_SampleTime_55Cycles5);

ADC_Cmd(ADC1,ENABLE);
 
ADC_ResetCalibration(ADC1);
 
while(ADC_GetResetCalibrationStatus(ADC1));

ADC_StartCalibration(ADC1);

while(ADC_GetCalibrationStatus(ADC1));

ADC_SoftwareStartConvCmd(ADC1,ENABLE);
}
uint16_t Get_Value(void){
while(ADC_GetITStatus(ADC1,ADC_FLAG_EOC)==RESET);
return ADC_GetConversionValue(ADC1);
}
#ifndef ADC_H
#define ADC_H
#include "stm32f10x.h"                  // Device header
void adc_init(void);
uint16_t Get_Value(void);
#endif